#[build-system]
#requires = ["setuptools"]
#build-backend = "setuptools.build_meta"

[tool.black]
count = false
line-length = 88
statistics = true
ignore = ["W191", "E265", "E303", "E402", "F401"]
exclude = [".git", "__pycache__", "build", "dist", "archive"]
include = ["test/*"]

[tool.ruff]
# https://docs.astral.sh/ruff/configuration/#__tabbed_1_1
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Black has 88
line-length = 110
indent-width = 4

# Assume Python 3.10
target-version = "py310"

# ========= custom ========
src = [".", "src", "rewe_dl"]

[tool.ruff.lint]
# Enable a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
	#"E4", "E7", "E9",
	"RUF",
	"I", # isort
]

ignore = [
	"W191", 
	"E265", "E303", "E402",
	"F401", "F821", "F401",
	"RUF013" # implicit-optional (var a: str = None)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
# F401 - when class is commented out the import would be unused
# I001 - Imports sorting
# unfixable = ["F401", "I001"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Avoiding flagging (and removing) any codes starting with `V` from any
# `# noqa` directives, despite Ruff's lack of support for `vulture`.
external = ["V"]

# ====== custom which derive from docs ======                  
extend-select = ["I001"] # Sort imports by length

# recognize this as logger object
logger-objects = ["rewe.log"]

# A list of task tags to recognize
task-tags = ["TODO", "FIXME", "XXX", "HACK", "HINT", "WORKAROUND"]

[tool.ruff.lint.isort]
# profile = "black"

# to have longer strings first set it to false
length-sort = true

# Sort straight imports by their string length.
length-sort-straight = true

# Don't sort straight-style imports (like import sys) before from-style imports (like from itertools import groupby). Instead, sort the imports by module, independent of import style.
force-sort-within-sections = false # this must be false

#from-first = false
order-by-type = true

section-order = ["future", "standard-library", "first-party", "local-folder", "third-party"]

known-first-party = ["src", "rewe_dl"]

no-lines-before = []

required-imports = ["from __future__ import annotations"]

# known-local-folder = ["src", "rewe_dl", "rewe"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.


# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

# custom settings which derive from docs
docstring-code-format = true

# TODO https://github.com/astral-sh/ruff/issues/8360 - Formatter: Specify indentation for function parameters
